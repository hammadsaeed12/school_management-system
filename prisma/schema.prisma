// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String?      @unique
  phone      String?      @unique
  address    String
  img        String?
  bloodType  String
  gender     UserGender
  createdAt  DateTime     @default(now())
  parentId   String
  parent     Parent       @relation(fields: [parentId], references: [id])
  classId    Int
  classes    Class        @relation(fields: [classId], references: [id])
  grade      Grade?       @relation(fields: [gradeId], references: [id])
  gradeId    Int?
  attendance Attendance[]
  result     Result[]
}

model Teacher {
  id        String     @id
  username  String     @unique
  name      String
  surname   String
  email     String?    @unique
  phone     String?    @unique
  address   String
  img       String?
  bloodType String
  gender    UserGender
  createdAt DateTime   @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String     @id
  username  String     @unique
  name      String
  surname   String
  email     String?    @unique
  phone     String     @unique
  address   String
  img       String?
  bloodType String
  gender    UserGender
  createdAt DateTime   @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  supervisor    Teacher?        @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  teacherId     String
  Students      Student[]
  grade         Grade?         @relation(fields: [gradeId], references: [id])
  gradeId       Int?
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id         Int          @id @default(autoincrement())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime
  Subject    Subject?     @relation(fields: [subjectId], references: [id])
  subjectId  Int?
  class      Class?       @relation(fields: [classId], references: [id])
  classId    Int?
  teacher    Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId  String?
  exam       Exam[]
  assignment Assignment[]
  attendance Attendance[]
}

model Exam {
  id       Int      @id @default(autoincrement())
  title    String
  starTime DateTime
  endTime  DateTime
  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  student      Student   @relation(fields: [studentId], references: [id])
  studentId    String
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

enum UserGender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
